/*  
 * The magic happens in grid.less
 */

@import 'reset';
@import 'grid';

/* Simple body styles for demo */

body {
	font-family: 'Source Sans Pro', sans-serif;
	color: #555;
	width: 100%;
	max-width: 1000px;
	margin: 0px auto;
	font-size: 15px;
	line-height: 1.5em;
}

a {
	text-decoration: none;
	color: #6E9DBF;
	transition: color linear .1s;

	&:hover {
		color: darken(#6E9DBF,5%);
	}
}

h1,h2,h3,h4,h5,h6 {
	font-weight: normal;
	margin-bottom: 0;
}

h1 {
	line-height: 1.3;
}

header {
	padding: 20px;
}

.example {
	margin-bottom: 20px;

	.col {
		background-color: #dedede;
		padding-top: 20px;
		padding-bottom: 20px;
		text-align: center;

		&:first-child {
			background-color: #cccccc;
		}
	}
}

.content {
	margin-bottom: 20px;
	text-align: left;
}

/*
 * Here comes the grid! You can use semantic class names or numerical, whatever works for you.
 * All column declarations go inside a media query for mobile-first responsiveness. The default column width is 100%. 
 */

@media only screen and (min-width: @breakpoint ) {
	.primary {
		.columns(8);
	}

	.secondary {
		.columns(4);
	}

	.one {
		.columns(1);
	}

	.two {
		.columns(2);
	}

	.three {
		.columns(3);
	}

	.four {
		.columns(4);
	}

	.five {
		.columns(5);
	}

	.six {
		.columns(6);
	}

	.seven {
		.columns(7);
	}

	.eight {
		.columns(8);
	}

	.nine {
		.columns(9);
	}

	.ten {
		.columns(10);
	}

	.eleven {
		.columns(11);
	}

	.twelve {
		.columns(12);
	}

	.push-1 {
		.push(1);
	}

	.push-4 {
		.push(4);
	}
}